ffmpeg -i ../stream_conditioner/app/test.ts -c:v libx264 -x264opts keyint=25:min-keyint=25:scenecut=-1 -acodec copy -streamid 0:2064 -streamid 0:2068 -g 25 -vb 1800k -acodec copy ../stream_conditioner/app/test_2mbps.ts


# For concatenating files
ffmpeg -i "concat:ott_test.ts|ott_test.ts|ott_test.ts|ott_test.ts|ott_test.ts" -vcodec copy -acodec copy new_1hr_ott_test.ts

# Add time code
ffmpeg -i "concat:1_NHCTV018020014A01.ts|M2_EQI-NAFO002-030.ts|3_NHCTV018020014A01.ts|M1_DLK-MOMM622-030.ts|4_NHCTV018020014A01.ts|M2_EQI-NAFO002-030.ts" -acodec copy -vf "drawtext=fontsize=72:fontfile=/usr/share/fonts/truetype/freefont/FreeMono.ttf:timecode='00\:00\:00\:00':rate=25:fontcolor='white':boxcolor=0x000000AA:box=1:x=(w-tw)/4: y=h-(2*lh)" -vb 6000000 1.ts


# Setting pes_payload_size to a low value 16 which will ensure tha even for audio every pes will have only one audio frame worths data
ffmpeg -i NHCTV018020014A01.ts -bf 2 -vcodec h264 -vb 6000000 -acodec copy -f mpegts -pes_payload_size 16 -t 180 1_NHCTV018020014A01.ts

#Another example of concatenation
ffmpeg -f concat -i concat_test.txt -acodec copy -vf "drawtext=fontsize=72:fontfile=/usr/share/fonts/truetype/freefont/FreeMono.ttf:timecode='00\:00\:00\:00':rate=25:fontcolor='white':boxcolor=0x000000AA:box=1:x=(w-tw)/4: y=h-(2*lh)" -vb 6000000  1.ts


# For separating audio channels
ffmpeg -i stereo.wav -map_channel 0.0.0 left.wav -map_channel 0.0.1 right.wav


# Covert 8 mono tracks in mxf to 4 stereo pairs
ffmpeg -i Seg1_8Ch_03Sec.mxf -map 0:0 -filter_complex "[0:1][0:2]amerge=inputs=2[aout0]" -map "[aout0]"  -filter_complex "[0:3][0:4]amerge=inputs=2[aout1]" -map "[aout1]"  -filter_complex "[0:5][0:6]amerge=inputs=2[aout2]" -map "[aout2]"  -filter_complex "[0:7][0:8]amerge=inputs=2[aout3]" -map "[aout3]" -vcodec copy  out.mxf


MP$Box command to export a ts file to mp4 file format
MP4Box -add tit.ts new_file.mp4


# The following command changes the input field order when input is DVPAL(bff) to tff and then encodes.
ffmpeg -i HS111151B_MorningShow.mov -vf "fieldorder=tff" -map 0:v -map 0:a:0 -acodec libfdk_aac -ac 2 -flags +ilme+ildct -copyts -ar 48000 -ab 320k -vcodec h264 -pix_fmt yuv420p -bf 2 -profile:v high -vb 5000000 -g 13 -streamid 0:2064 -streamid 1:2068 -x264opts tff=1 SFFMPEG_HS111151B_MorningShow.ts

# Split input stereo audio in mxf file to have 2 output mono audio tracks.
ffmpeg -i ZF29470.mxf -filter_complex "[0:1]pan=1c|c0=c0[left];[0:1]pan=1c|c0=c1[right]" -map 0:v -map "[left]" -map "[right]" -vcodec copy -acodec pcm_s16le Z.mxf


# Split stereo to two monos and mux them into a single file as two seprate mono tracks
ffmpeg -i "$op_mov" -map_channel 0.1.0 L.wav -map_channel 0.1.1 R.wav
ffmpeg -i "$ip_mxf" -i L.wav  -i R.wav -map 0:0 -c:v mpeg2video -map 1:0 -acodec pcm_s24le -map 2:0 -acodec pcm_s24le "$op_mxf"


# Command for lossless H264 encoding
ffmpeg -i new_pal_to_ntsc_out1.mov -vcodec libx264 -crf 0 -acodec copy -aspect 4:3 n1.mov


# Remux Mp4 file containing H264 to ts
ffmpeg -i "CR4.mp4" -vbsf h264_mp4toannexb -pes_payload_size 16 -vcodec copy -acodec copy -streamid 0:2064 -streamid 1:2068 ~/CR4.ts




# Barcoding Mxf files with 8 monos where each pair is a unique pid.

Following command merges first two mono tracks in input mxf to create a single output stereo track.

ffmpeg -i SFLLDOMI360.mxf -vcodec copy -map 0:0 -filter_complex "[0:1][0:2]amerge=inputs=2[aout0]" -map "[aout0]" -acodec pcm_s24le   SFLLDOMI360_To_Barcode.mov

Barcode the above generated mov file and get the barcoded output say WM_SFLLDOMI360_To_Barcode.mov.

Now create the output file to be shared back with Scipps as follows. The following splits the stereo in mov and puts it as first 2 mono channels in output mxf.

ffmpeg -i SFLLDOMI360.mxf  -i WM_SFLLDOMI360_To_Barcode.mov  -map 0:0  -vcodec copy -filter_complex '[1:a]channelsplit=channel_layout=stereo[L][R]' -map '[L]' -map '[R]' -map 0:2 -map 0:3 -map 0:4 -map 0:5 -map 0:6 -map 0:7 -acodec pcm_s24le   TO_SCRIPPS_SFLLDOMI360.mxf




# Barcoding files whoch have mulitiple channels e.g. 8 channels in single track

1. Split the input audio into 8 separate tracks
ffmpeg -i TKDPK174738.mxf -vcodec copy -filter_complex '[0:a]channelsplit=channel_layout=7.1[FL][FR][FC][LFE][BL][BR][SL][SR]' -acodec pcm_s16le -map 0:0 -map "[FL]" -map "[FR]" -map "[FC]" -map "[LFE]" -map "[BL]" -map "[BR]" -map "[SL]" -map [SR] t.mov

2. Merge every pair to get 4 streo tracks
ffmpeg -i t.mov -vcodec copy -map 0:0 -filter_complex "[0:1][0:2]amerge=inputs=2[aout0]" -acodec pcm_s16le -filter_complex "[0:1][0:2]amerge=inputs=2[aout1]" -filter_complex "[0:5][0:6]amerge=inputs=2[aout2]" -filter_complex "[0:7][0:8]amerge=inputs=2[aout3]" -map "[aout0]" -map "[aout1]" -map "[aout2]" -map "[aout3]" t1.mov

3. Barcode t1.mov

4. ffmpeg -i t1.mov -vcodec copy -map 0:0 -filter_complex "[0:1][0:2][0:3][0:4]amerge=inputs=4[aout1]" -acodec pcm_s16le -map "[aout1]" t1_amerge.mxf





# Audio normalization usin loudnorm filter. Dependency libebur128

./ffmpeg -i /home2/sb_media/tmp/tuff/high_UM171_4.ts -af loudnorm=I=-24:TP=-2 -vcodec copy ffmpeg_high_UM171.ts





# Copying unknow data pid to the output

ffmpeg -i Sentry5-HD2PROD-FUT2-12HD-TriggeredByUser-20161104-134548-00-c10.ts -map 0:0 -map 0:3 -map 0:4 -acodec copy -vcodec copy -codec copy -copy_unknown  Pappu.ts






# Crop scale and convert from 1080i50 to PAL

ffmpeg -i EKP012199.mxf -vf "crop=1440:1080:240:0,scale=720:576,w3fdif,scale=720:576:interl=0:in_color_matrix=bt709:out_color_matrix=bt601,tinterlace=4:flags=vlpf" -aspect 4:3 -r 25 -acodec copy -y -vb 20000k SH_EKP012199.mxf





#Encoding input MXF for Z3
ffmpeg -i EKP012199.mxf -vf "crop=1440:1080:240:0,scale=720:576" -filter_complex "[0:1][0:2]amerge=inputs=2[aout0]" -map 0:0 -map "[aout0]" -aspect 4:3 -r 25 -acodec libfdk_aac -y -vcodec h264 -pix_fmt yuv420p -bf 2 -vb 8000k -streamid 0:2064 -streamid 1:2068 -pes_payload_size 16 1SH_EKP012199.ts





#SCRIPPS Barcoding of MXF

-> Convert 12 mono to 6 stereo

ffmpeg -i AB0000032.mxf -vcodec copy -map 0:0 -filter_complex "[0:1][0:2]amerge=inputs=2[aout0]" -filter_complex "[0:3][0:4]amerge=inputs=2[aout1]"  -filter_complex "[0:5][0:6]amerge=inputs=2[aout2]" -filter_complex "[0:7][0:8]amerge=inputs=2[aout3]" -filter_complex "[0:9][0:10]amerge=inputs=2[aout4]"  -filter_complex "[0:11][0:12]amerge=inputs=2[aout5]" -map "[aout0]" -map "[aout1]" -map "[aout2]" -map "[aout3]" -map "[aout4]" -map "[aout5]" -acodec pcm_s24le AB0000032_STEREO.mov


Following is incomplete. To be done
ffmpeg -i AB0000032_STEREO_1300.mov -map 0:0  -vcodec copy -filter_complex '[0:1]channelsplit=channel_layout=stereo[L1][R1]' -filter_complex '[0:2]channelsplit=channel_layout=stereo[L2][R2]' -filter_complex '[0:3]channelsplit=channel_layout=stereo[L3][R3]' -filter_complex '[0:4]channelsplit=channel_layout=stereo[L4][R4]' -filter_complex '[0:5]channelsplit=channel_layout=stereo[L5][R5]' -filter_complex '[0:6]channelsplit=channel_layout=stereo[L6][R6]' -map '[L1]' -map '[R1]' -map '[L2]' -map '[R2]' -map '[L3]' -map '[R3]' -map '[L4]' -map '[R4]' -map '[L5]' -map '[R5]' -map '[L6]' -map '[R6]' -acodec pcm_s24le AB0000032_STEREO_1300.mxf




# Command to add frame number at the bottom right corner
ffmpeg -i IH_PA_SCDKNGHTME_02.ts -ss 184.960 -s 320x256 -t 60 -vf "drawtext=fontsize=24:fontfile=/usr/share/fonts/truetype/freefont/FreeMono.ttf: text=%{n}: x=w-tw: y=h-lh: fontcolor=white" -acodec mp2 o.mov



# Create a jpeg image from a particular video frame

ffmpeg -ss 50 -i IH_PA_NJSPINDOTD_01.ts -t 0.040 -f image2 colorbar2.jpg



#Audio fade in fade out
ffmpeg -i chevy.wav -ss 10 -t 5 -af "afade=t=in:st=10:d=0.2,afade=t=out:st=14:d=1" tmp.wav


# FFmpeg command to convert HD to low resolution ML file
ffmpeg -i TE00000601_01_0001_A0_HD_HD_D_PV05.ts -vf yadif -s 480x270 -vcodec libx264 -acodec libfdk_aac -ab 192k -vb 1200000 -bf 0 -x264opts "keyint=48:min-keyint=48:no-scenecut" -vf "drawtext=fontsize=60:fontfile=/usr/share/fonts/truetype/freefont/FreeMono.ttf: text=%{n}: x=w-tw: y=h-lh: fontcolor=white" 480x270_TE00000601_01_0001_A0_HD_HD_D_PV05.mov


#WebM files with all I frames
ffmpeg -i Suits.S02E08.HDTV.x264.mp4 -c:v vp8 -intra -vb 1200k Suits.S02E08.HDTV.x264.webm



# When converting a AV file to wav, if there are discontinuities in audio pts the generated wav duration
# will not match the AV media file duration with respect to corresponding time stamps. "-async 1" option
# comes to rescues as follows
ffmpeg -i ffmpeg_1hr_00.mp4 -ar 48000 -async 1 ffmpeg_1hr_00.wav


# Concat multiple files whose names are in a file to create a new file
for f in dec_05_1hr*;do cat ${f} | sed -e "s/^/file \'/" | sed -e "s/$/\'/" > _${f}_; ffmpeg -f concat -i _${f}_ -c copy ${f}.ts; done


# fps conversion and scale commands
#MP4 1920x1080 @ 24fps to 1080p29.97
ffmpeg -y -i ${in}.mp4 -map 0:v:0 -map 0:a:0 -acodec libfdk_aac -profile:a aac_low -ac 2 -ar 48000 -ab 192k -vcodec libx264 -vf 'fps=fps=29.97' -pix_fmt yuv420p -g 13 -bf 2 -profile:v high -vb 12000000  -minrate:v 12000k -maxrate:v 12000k -bufsize:v 24000k -muxrate 13000k -x264opts nal-hrd=cbr  -pes_payload_size 16 -streamid 0:2064 -streamid 1:2068 ${out}.ts

#MOV 4k to 1080p29.97
ffmpeg -y -i ${in}.mov -map 0:v:0 -map 0:a:0 -acodec libfdk_aac -profile:a aac_low -ac 2 -ar 48000 -ab 192k -vcodec libx264 -vf 'fps=fps=29.97,scale=1920:1080' -pix_fmt yuv420p -g 13 -bf 2 -profile:v high -vb 12000000  -minrate:v 12000k -maxrate:v 12000k -bufsize:v 24000k -muxrate 13000k -x264opts nal-hrd=cbr  -pes_payload_size 16 -streamid 0:2064 -streamid 1:2068 ${out}.ts



# Transcode mulitple files. File paths are o_files.txt. The circus below is because the file path could have spaces which can screw the for loop
IFS=$'\n' nohup sh -c 'for f in `cat o_files.txt`;do b=${f##*/}; ffmpeg -y -i "$f" -vb 1000k -intra -acodec mp2 -ab 192k -s 398x224 ../low_res/${b%.*}.mp4; done' &


# Adjust peak db levels of various tracks in the media input file
ffmpeg -i Test1_20180517.mxf -i BEFOREWATERMARK.mxf -filter_complex "[0:a:0]volume=3dB[aout0],[0:a:1]volume=3dB[aout1]" -vcodec copy -acodec pcm_s24le -map 0:v -map "[aout0]" -map "[aout1]" -map 1:3 -map 1:4 -map 1:5 -map 1:6 -map 1:7 -map 1:8 DBAdj_Test1_20180517.mxf


# Detect audio peak db level
ffmpeg -i BEFOREWATERMARK.wav -af 'volumedetect' -f null /dev/null


# Generate noise wav file of 30s duration
ffmpeg -ar 48000 -ac 2 -f s16le -i /dev/urandom -acodec copy -t 30 o.wav


# Split media AV file in to vob audio and video files
ffmpeg -i 1SH_EKP012199.ts -vcodec copy -an v.vob -acodec copy -vn a.vob


# Create single resolution HLS stream
ffmpeg -i NO_SA_TETIGO0029_01.ts -s 480x270 -vb 600000 -vcodec h264 -bf 0 -g 12 -acodec copy -f segment -segment_time 10 -segment_format mpegts -segment_list hls_media/out.m3u8 -segment_list_type m3u8 "hls_media/segment_%04d.ts"

# HLS vod creation command
ffmpeg -y -i CAMPBELL_BDAY.ts -filter_complex "[0:v:0]tpad=stop_mode=clone:stop_duration=0.005000,setpts=(PTS-STARTPTS),fps=fps=29.970030,scale=640x480,setsar=sar=1/1,format=yuv420p[v0];[0:a:0]asetpts=(PTS-STARTPTS)[a0]" -map_chapters -1 -map [v0] -c:v libx264 -maxrate 5000000 -bufsize 3750000  -preset veryfast -profile high -vsync cfr -nal-hrd vbr -force_key_frames "expr:gte(t,n_forced*1.000)" -map [a0] -ar 48000 -c:a libfdk_aac -ac 2 -b:a 128000 -f hls -hls_time 5.000000 -hls_playlist_type vod -hls_list_size 0 -hls_segment_filename ./seg_640x480_5128000_%04d.ts -hls_flags temp_file -t 30.000000 ./seg_640x480_5128000.m3u8

# Decode dolby embedded on 2 mono channels of input mxf and embed 5.1 audio into output mov
ffmpeg -non_pcm_mode copy -i BX-MV006416_8mono_30sec.mxf -filter_complex "[0:7][0:8]amerge=inputs=2[aout0]" -map "[aout0]" -acodec pcm_s24le -f s24le o.dat

ffmpeg -i BX-MV006416_8mono_30sec.mxf -i o.dat -ar 48000 -acodec pcm_s24le -map 0:0 -map 1:0 -vcodec copy BX-MV006416_8mono_30sec.mov


# Split 4.0 channel layout to 2 stereo tracks. Input has a audio track having 4.0 channel layout. Transcode and give out two stereo tracks
sudo ffmpeg -i tmp_1.mov -filter_complex "channelsplit=channel_layout=4.0[L1][R1][L2][R2],[L1][R1]amerge=inputs=2[aout0],[L2][R2]amerge=inputs=2[aout1]" -map 0:v -map [aout0] -map [aout1] -vcodec copy -acodec mp2 t1.mov


# Plot loudness of a standalone file, such as a MOV or MP4...

ffmpeg -hide_banner -f "mp4" -i 'http://distribution.bbb3d.renderfarming.net/video/mp4/bbb_sunflower_1080p_30fps_normal.mp4' -filter_complex "ebur128=peak=true:video=1:meter=9" -c:v libx264 -c:a aac -f mpegts - | ffplay -


# Realtime plot of a HLS stream.
ffmpeg -hide_banner -f "hls" -http_persistent "0" -i 'https://cinedigm-thunderstorm.amagi.com/amagi_hls_data_xumo123-contv/CDN/1280x720_2328000/index.m3u8' -filter_complex "ebur128=peak=true:video=1:meter=9" -c:v libx264 -c:a aac -f mpegts - | ffplay -


# Frame accurate low resolution conversion.
ffmpeg -i DS_1_UH_SA_TRANRD0032_01.mov -vf yadif -s 480x270 -vcodec libx264 -acodec mp2 -ab 192000 -vb 1200000 -bf 0 -g 13 o.mov


# Extract top field, scale and encode
ffmpeg -i ChevyCruze_30s_ts.ts -vf "field=type=top, scale=w=720:h=576" -vb 10000000 o.ts

# Low res file generation from HD interlaved content. Picks onlt the top field and scales it down.
ffmpeg -i SUPERBOOK310.mxf -vf "field=type=top, scale=w=480:h=270"  -filter_complex "[0:1][0:2]amerge=inputs=2[aout0]" -map 0:0 -map "[aout0]" -vcodec libx264 -acodec mp2 -ab 192000 -vb 1200000 -bf 0 -g 13 ./lores/SUPERBOOK310.mov


# Command for frame rate conversion using motion compensated interpolation. Converts original 25 fps to 29.97
ffmpeg -i ChevyCruze_30s_ts.ts -vf "minterpolate=fps=29.97:mi_mode=mci" -vcodec h264 -vb 6000000 -acodec copy -bf 2 /tmp/1.ts


# Generate blac or color video
ffmpeg -f lavfi -i color=color=black -s 1920x1080 -pix_fmt yuv420p -codec h264 -aspect 16:9 -t 30 -muxrate 3000000 -crf 0 -vb 2000000 /tmp/black.ts


# Mixing multiple channels into stereo. filter_complex
ffmpeg -y -i %{IN} -map 0:v -filter_complex \"[0]pan=stereo|c0=c0|c1=c1[a];[0]pan=stereo|c0=c2|c1=c3[b];[0]pan=stereo|c0=c4|c1=c5[c];[0]pan=stereo|c0=c6|c1=c7[d]\" -map \"[a]\" -map \"[b]\" -map \"[c]\" -map \"[d]\" -acodec libfdk_aac -profile:a aac_low -ac 2 -ar 48000 -ab 192k -vcodec libx264 -filter:v \"crop=720:576:0:32\" -pix_fmt yuv420p -flags +ilme+ildct -x264opts tff=1 -x264opts nal-hrd=cbr -g 13 -aspect 4:3 -bf 2 -profile:v high -b:v 12M -minrate:v 12M -maxrate:v 12M -muxrate 14M -bufsize:v 25M -pes_payload_size 16 -streamid 0:2064 -streamid 1:2068 -streamid 2:2069 -streamid 3:2070 -streamid 4:2071 %{OUT} 2>&1


# HLS/Mpegts output with a specific start offset. Retimestamping
ffmpeg -y -i PLCFEAT_17_09_11_SOL_CAMPBELL_BDAY.ts  -output_ts_offset 95435.2 -map 0:v -c:v copy -map 0:a -c:a copy -f hls -hls_time 1.000000 -hls_playlist_type vod -hls_list_size 0 -hls_segment_filename ./seg_640x480_5128000_%04d.ts -hls_flags temp_file -t 30.000000 ./seg_640x480_5128000.m3u8

#Using this command to pick required frames...
#https://ffmpeg.org/ffmpeg-filters.html
ffmpeg -copyts -vsync 0 -segment_time_metadata 1 -i input.ffconcat -vf select=concatdec_select -af aselect=concatdec_select output.avi



# Pip picture in picture example. Takes 2 ms3u8 and creates an mp4
ffmpeg -itsoffset 30 -i ./vod1/final_vod.m3u8 -i ./vod2/final_vod.m3u8 -filter_complex "[0]scale=iw/8:ih/8[pip]; [1][pip] overlay=main_w-overlay_w-10:main_h-overlay_h-10:enable='between(t,30,50)'" -profile:v main -level 3.1 -b:v 2000000 -ab 128k -vcodec h264 -acodec libfdk_aac output.mp4


# Decode h264 bitstream using ffmpeg
ffmpeg -f h264 -probesize 32 -vcodec h264 -i decoderinp_notworking.h264 o.yuv


# Encode v4l2 and also video. Live recording
ffmpeg -f v4l2 -i /dev/video0 -f alsa -i hw:2,0 -s 640x480 -vcodec h264 -force_key_frames 00:00:00.000 -vb 0 -acodec aac o.ts


# ZeroMq PUB_SUB example
# ffmpeg should be build with --enable-libzmq
# To buld libzmq do the following:
#  wget https://github.com/zeromq/libzmq/releases/download/v4.2.2/zeromq-4.2.2.tar.gz
# tar xvzf zeromq-4.2.2.tar.gz
# cd zeromq-4.2.2
# ./configure; sudo make install
./ffmpeg -stream_loop -1 -re -i /home2/sb_media/ChevyCruze_30s_ts.ts -pix_fmt yuv420p -f rawvideo zmq:tcp://127.0.0.1:5555
./ffplay -s 1920x1080 -pix_fmt yuv420p -f rawvideo zmq:tcp://127.0.0.1:5555
./ffplay -s 1920x1080 -pix_fmt yuv420p -f rawvideo zmq:tcp://127.0.0.1:5555


# Transcode with strict GOP and IDR frame occuring every 1 second
ffmpeg -i test_file_30fps.mov  -vf "scale=384:216" -aspect 16:9  -force_key_frames "expr:gte(t,n_forced*1.0)" -vcodec h264 -x264opts keyint=15:min-keyint=15:scenecut=-1 -profile:v high -acodec aac -vb 256000 -ab 128000 -pes_payload_size 32 -streamid 0:481 -streamid 1:492 lowres_test_file_30fps.ts


# Graphics(tga) overlay on video with graphics looping till end of cideo
ffmpeg -hide_banner -y -i /home/ec2-user/beach.mxf -pattern_type glob -framerate 25 -i "/home/ec2-user/ArrowTV_logo_V2/*.tga" \
       -filter_complex "[1]loop=loop=-1[1g]" \
       -filter_complex "[0][1g]overlay,split=3[a][b][c];[a]scale=w=640:h=360:force_original_aspect_ratio=decrease[a];[b]scale=w=1280:h=720:force_original_aspect_ratio=decrease[b];[c]scale=w=1920:h=1080:force_original_aspect_ratio=decrease[c]" \
       -map "[a]" -map 0:a -c:v h264 -profile:v main -crf 20 -sc_threshold 0 -g 72 -keyint_min 72 -hls_time 4 -hls_playlist_type vod -b:v 800k -maxrate 856k -bufsize 1200k -b:a 96k -hls_flags single_file 360p.m3u8 \
       -map "[b]" -map 0:a -c:a aac -ar 48000 -c:v h264 -profile:v main -crf 20 -sc_threshold 0 -g 72 -keyint_min 72 -hls_time 4 -hls_playlist_type vod -b:v 2800k -maxrate 2996k -bufsize 4200k -b:a 128k -hls_flags single_file 720p.m3u8 \
       -map "[c]" -map 0:a -c:a aac -ar 48000 -c:v h264 -profile:v main -crf 20 -sc_threshold 0 -g 72 -keyint_min 72 -hls_time 4 -hls_playlist_type vod -b:v 5000k -maxrate 5350k -bufsize 7500k -b:a 192k -hls_flags single_file 1080p.m3u8

# Encode a sequence of tga files to ts with silence audio
ffmpeg -framerate 30000/1001 -pattern_type  glob -i "*.tga" -f lavfi -i anullsrc  -vcodec libx264 -b:v 1000k -b:a 128k -s 1920x1080 -pix_fmt yuv420p -ar 48k -streamid 0:2064 -streamid 1:2068 -shortest i60.ts
